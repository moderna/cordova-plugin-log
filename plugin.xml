<?xml version="1.0" encoding="UTF-8"?>
<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
    xmlns:android="http://schemas.android.com/apk/res/android"
    id="at.modalog.cordova.plugin.log"
    version="1.0.0">

    <name>Log</name>
    <repo>https://github.com/moderna/cordova-plugin-log.git</repo>
    <keywords>log,file,cordova,phonegap,android</keywords>
    <license>MIT</license>
    <author>Modern Alchemists OG</author>
    <description>
      &lt;p&gt;This is a plugin writes all cordova javascript logs into a file in a public folder (Android: sdCard, iOS: ~/Documents).&lt;/p&gt;
    </description>

    <!-- android -->
    <platform name="android">
        <config-file target="res/xml/config.xml" parent="/*">
            <feature name="Log" >
                <param name="android-package" value="at.modalog.cordova.plugin.log.CordovaChromeClientLog.java"/>
            </feature>
        </config-file>

        <source-file src="src/android/CordovaChromeClientLog.java" target-dir="src/at/modalog/cordova/plugin/log" />
    </platform>

    <info>
        ATTENTION: There is some manual work to be done before you can use this plugin!

        Android:

        1) In edit the following variables to your liking:

            private String logDir = ".at.modalog.cordova.plugin.log";
            private String logFileName = "CordovaChromeClient.log";
            private double logFileMaxSizeInKiloBytes = 512;

        2) Open your apps main.java file and add this import statement:

            import at.modalog.cordova.plugin.log.CordovaChromeClientLog;

        3) Update your mina.java files to this:

            // deactivate the regular init
            // super.init();

            // modify init to use "CordovaChromeClientLog"
            CordovaWebView webView = this.makeWebView();
            super.init(webView, makeWebViewClient(webView), CordovaChromeClientLog.makeChromeClient(this, webView));
            // ...

        iOS:

        1) Make Sure that the org.apache.cordova.console plugin is added.

        2) Add this to your onDeviceReady JavaScript handler:


            // add log and error handlers for iOS
            if( device.platform == "iOS" )
            {
                window.onerror = function( message, url, lineNumber )
                {
                    console.log("Error: "+message+" in "+url+" at line "+lineNumber);
                }
            }

        3) Add this to your xCode Projects "CDVLogger.h":

            - (void)logToFile:(NSString*)content;

        4) Add this to your xCode Projects "CDVLogger.m" and configure "logDir", "logFileName" and "logFileMaxSizeInKiloBytes":

            - (void)logToFile:(NSString*)content
            {
                NSString* logDir = @".at.modalog.cordova.plugin.log";
                NSString* logFileName = @"CordovaChromeClient.log";
                unsigned long long logFileMaxSizeInKiloBytes = 512;

                // Get the file path
                NSString* documentsDirectory = [NSSearchPathForDirectoriesInDomains (NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
                NSString* filePath = [documentsDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"%@/%@", logDir, logFileName]];

                // Create dir if it doesn't exist
                if(![[NSFileManager defaultManager] fileExistsAtPath:logFileName])
                {
                    [[NSFileManager defaultManager] createDirectoryAtPath:[documentsDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"%@", logDir]] withIntermediateDirectories:YES attributes:nil error:NULL];
                }

                // Create file if it doesn't exist
                if(![[NSFileManager defaultManager] fileExistsAtPath:filePath])
                {
                    [[NSFileManager defaultManager] createFileAtPath:filePath contents:nil attributes:nil ];
                }

                // Append text to file
                NSFileHandle* file = [NSFileHandle fileHandleForUpdatingAtPath:filePath];
                [file seekToEndOfFile];
                [file writeData:[content dataUsingEncoding:NSUTF8StringEncoding]];

                NSDictionary* attributes = [[NSFileManager defaultManager] attributesOfItemAtPath:filePath error:NULL];
                unsigned long long fileSize = [attributes fileSize];

                // Shorten the file to about 1/3 of its size if itÂ´s too big
                if( fileSize > logFileMaxSizeInKiloBytes * 1024 )
                {
                    NSString* fullContent = [NSString stringWithContentsOfFile:filePath
                    encoding:NSUTF8StringEncoding
                    error:NULL];
                    [file truncateFileAtOffset:0];
                    [file seekToEndOfFile];
                    [file writeData:[[fullContent substringFromIndex: fileSize * 0.3] dataUsingEncoding:NSUTF8StringEncoding]];
                }

                // Close file
                [file closeFile];
            }

        5) Add this to your xCode Projects "CDVLogger.m" at the end of the - logLevel() method:

            [self logToFile: [NSString stringWithFormat:@"%@: %@\n", level, message]];
    </info>

</plugin>